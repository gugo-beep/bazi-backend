// gugo-beep/bazi-backend/bazi-backend-18275ce3be8ede12177b43420d0b622777a7d327/src/update-frontend-mock.js

import { findPossibleGregorianDates, generateBaziProfile } from './baziService.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const userInput = process.argv[2]; 
const genderArg = process.argv[3];

if (!userInput || !genderArg) {
    console.error("\n❌ 错误：请提供日期和性别！");
    console.error("用法示例:");
    console.error("  公历: node src/update-frontend-mock.js \"1996-04-13 00:18:00\" 女");
    console.error("  农历: node src/update-frontend-mock.js \"lunar:二〇〇一年闰八月十四 08:00\" 女");
    console.error("  四柱: node src/update-frontend-mock.js \"pillars:丙子-壬辰-庚辰-丙子\" 女\n");
    process.exit(1);
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const frontendMockFilePath = path.resolve(__dirname, '../../bazi-frontend/src/app/mock-bazi-data.ts');
const localOutputPath = path.resolve(__dirname, '../bazi-output.json');

async function main() {
    try {
        console.log(`🚀 步骤 1: 正在为输入 "${userInput}" 查找可能的公历日期...`);
        const possibleDates = await findPossibleGregorianDates(userInput);

        if (possibleDates.length === 0) {
            console.error('\n❌ 错误：未找到与输入匹配的有效公历日期。');
            console.error('请检查您的输入是否正确，特别是农历日期是否存在。');
            process.exit(1);
        }

        let chosenDate;

        if (possibleDates.length > 1) {
            console.warn(`\n⚠️ 注意：您输入的四柱对应 ${possibleDates.length} 个可能的公历日期。`);
            console.log('请从以下列表中选择一个，并用它作为日期参数重新运行命令：\n');
            possibleDates.forEach((date, index) => {
                console.log(`  [${index + 1}] "${date}"`);
            });
            console.log('\n例如: npm run update-mock -- "1996-04-13 00:18:00" 女');
            process.exit(1); // 正常退出，等待用户操作
        } else {
            chosenDate = possibleDates[0];
            console.log(`✅ 找到唯一匹配的公历日期: ${chosenDate}`);
        }

        console.log(`\n🚀 步骤 2: 正在为 "${chosenDate}" (${genderArg}) 生成八字数据并更新前端...`);
        
        const baziData = await generateBaziProfile(chosenDate, genderArg);
        
        const tsFileContent = `// [Auto-generated by bazi-backend]\n// Case: ${userInput} (${genderArg})\n// Last updated: ${new Date().toLocaleString()}\n\nimport { BaziData } from "./bazi.interface";\n\nexport const mockBaziData: BaziData = ${JSON.stringify(baziData, null, 2)};\n`;

        fs.writeFileSync(frontendMockFilePath, tsFileContent);
        fs.writeFileSync(localOutputPath, JSON.stringify(baziData, null, 2));

        console.log(`\n✅ 全部成功！`);
        console.log(` -> 前端 mock 文件已更新: ${frontendMockFilePath}`);
        console.log(` -> 本地 JSON 文件已生成: ${localOutputPath}`);

        process.exit(0);

    } catch (error) {
        console.error("\n❌ 操作过程中发生错误:", error.message);
        process.exit(1);
    }
}

main();